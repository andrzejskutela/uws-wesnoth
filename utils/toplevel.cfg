#define REGISTER_NEW_EFFECT_DEFINITIONS
	[lua]
		name=custom_uws_effects
		code=<<
			function wesnoth.effects.capped_defense(u, cfg)
				local translation_map = {
					['forest'] = '^Fds',
					['hills'] = 'Hh',
					['reef'] = 'Wwrg',
					['shallow_water'] = 'Wwg',
					['flat'] = 'Gg',
					['frozen'] = 'Aa',
					['village'] = '^Ve',
					['swamp_water'] = 'Ss',
					['cave'] = 'Uu',
					['deep_water'] = 'Wog',
					['fungus'] = 'Tb^Tf',
					['mountains'] = 'Mm',
					['castle'] = 'Ce',
					['sand'] = 'Ds'
				}
				
				local defense_new = {}
				local defense_old = wml.parsed(wml.get_child(cfg, "defense"))
				local upgraded = 0
				local non_upgradeable = 0
				
				for k,v in pairs(defense_old) do
					if translation_map[k] ~= nil then
						local unit_base_defense = wesnoth.units.chance_to_be_hit(u, translation_map[k])
						
						if unit_base_defense <= 15 then
							non_upgradeable = non_upgradeable + 1
						else
							local new_defense = unit_base_defense + v
							if new_defense < 15 then
								new_defense = 15
							end
							
							defense_new[k] = new_defense
							upgraded = upgraded + 1
						end
					else
						wesnoth.interface.add_chat_message('ERROR', 'Missing translation table entry for ' .. k)
					end
				end
				
				if upgraded > 0 then
					wesnoth.units.add_modification(u, "object", {
						wml.tag.effect {
							apply_to = "defense",
							replace = true,
							wml.tag.defense (defense_new),
						},
					}, false)
				else
					wesnoth.units.add_modification(u, "object", {
						wml.tag.effect {
							apply_to = "hitpoints",
							increase_total = "10%",
							increase = "10%"
						},
					}, false)
					
					wml.variables['applied_rune_text'] = "<span color='#e84343'>Hitpoints +10%</span>"
				end
			end
			
			function wesnoth.effects.capped_champion_defense(u, cfg)
				local translation_map = {
					['forest'] = '^Fds',
					['hills'] = 'Hh',
					['reef'] = 'Wwrg',
					['shallow_water'] = 'Wwg',
					['flat'] = 'Gg',
					['frozen'] = 'Aa',
					['village'] = '^Ve',
					['swamp_water'] = 'Ss',
					['cave'] = 'Uu',
					['deep_water'] = 'Wog',
					['fungus'] = 'Tb^Tf',
					['mountains'] = 'Mm',
					['castle'] = 'Ce',
					['sand'] = 'Ds'
				}
				
				local defense_new = {}
				local defense_old = wml.parsed(wml.get_child(cfg, "defense"))
				local upgraded = 0
				local non_upgradeable = 0
				
				for k,v in pairs(defense_old) do
					if translation_map[k] ~= nil then
						local unit_base_defense = wesnoth.units.chance_to_be_hit(u, translation_map[k])
						
						if unit_base_defense > 10 then
							local new_defense = unit_base_defense + v
							if new_defense < 10 then
								new_defense = 10
							end
							
							defense_new[k] = new_defense
							upgraded = upgraded + 1
						end
					else
						wesnoth.interface.add_chat_message('ERROR', 'Missing translation table entry for ' .. k)
					end
				end
				
				if upgraded > 0 then
					wesnoth.units.add_modification(u, "object", {
						wml.tag.effect {
							apply_to = "defense",
							replace = true,
							wml.tag.defense (defense_new),
						},
					}, false)
				end
			end
			
			function wesnoth.effects.freezing_gem_defense(u, cfg)
				local translation_map = {
					['forest'] = '^Fds',
					['hills'] = 'Hh',
					['reef'] = 'Wwrg',
					['shallow_water'] = 'Wwg',
					['flat'] = 'Gg',
					['frozen'] = 'Aa',
					['village'] = '^Ve',
					['swamp_water'] = 'Ss',
					['cave'] = 'Uu',
					['deep_water'] = 'Wog',
					['fungus'] = 'Tb^Tf',
					['mountains'] = 'Mm',
					['castle'] = 'Ce',
					['sand'] = 'Ds'
				}
				
				local defense_new = {}
				local defense_old = wml.parsed(wml.get_child(cfg, "defense"))
				local upgraded = 0
				local non_upgradeable = 0
				
				for k,v in pairs(defense_old) do
					if translation_map[k] ~= nil then
						local unit_base_defense = wesnoth.units.chance_to_be_hit(u, translation_map[k])
						
						if unit_base_defense < 90 then
							local new_defense = unit_base_defense + v
							if new_defense > 90 then
								new_defense = 90
							end
							
							defense_new[k] = new_defense
							upgraded = upgraded + 1
						end
					else
						wesnoth.interface.add_chat_message('ERROR', 'Missing translation table entry for ' .. k)
					end
				end
				
				if upgraded > 0 then
					wesnoth.units.add_modification(u, "object", {
						wml.tag.effect {
							apply_to = "defense",
							replace = true,
							wml.tag.defense (defense_new),
						},
					}, false)
				end
			end
			
			function wesnoth.effects.remove_resistance(u, cfg)
				local resistance_new = {}
				local old_resistance = u:resistance_against(cfg.type)
				local reduce_value = cfg.amount
				
				if old_resistance > -15 then
					if reduce_value > old_resistance + 15 then
						reduce_value = old_resistance + 15
					end
					
					resistance_new[cfg.type] = reduce_value
					
					wesnoth.effects.resistance(u, {
						apply_to = "resistance",
						wml.tag.resistance (resistance_new),
					})
					
					wml.variables['reduced_resistance'] = reduce_value
				end
			end
			
			function wesnoth.effects.capped_champion_resistance(u, cfg)
				local resistance_new = {}
				local resistance_all = { 'arcane', 'blade', 'cold', 'fire', 'impact', 'pierce' }
				local total = 0
				local new_values_delta = wml.parsed(wml.get_child(cfg, "resistance"))
				local new_values_set = {}
				local new_value = 0
				local default_over_threshold = false
				local cap_res_count = 0
				local cap_res_amount = 0
				
				for k,v in ipairs(resistance_all) do
					default_over_threshold = false
					new_value = 100 - u:resistance_against(v)
					if new_value <= 20 then
						default_over_threshold = true
					else
						cap_res_count = cap_res_count + 1
					end
					
					if new_values_delta[v] and type(new_values_delta[v]) == "number" then
						new_value = new_value - new_values_delta[v]
					end
					
					if new_value < 0 then
						new_value = 0
					end
					
					new_values_set[v] = { ['value'] = new_value, ['default_over_threshold'] = default_over_threshold }
					total = total + new_value
				end
				
				if cap_res_count == 0 then
					cap_res_count = 1
				end
				
				local res_types_count = #resistance_all
				local avg = math.floor(total / res_types_count)
				if avg < 20 then
					cap_res_amount = math.floor(res_types_count * (20 - avg) / cap_res_count)
					
					for k,v in pairs(new_values_set) do
						if v.default_over_threshold == false then
							new_values_set[k]['value'] = v.value + cap_res_amount
						end
					end
				end
				
				local new_replace_values = {}
				for k,v in pairs(new_values_set) do
					new_replace_values[k] = v.value
				end
				
				wesnoth.effects.resistance(u, {
					apply_to = "resistance",
					replace = true,
					wml.tag.resistance (new_replace_values),
				})
			end
>>
	[/lua]
#enddef
