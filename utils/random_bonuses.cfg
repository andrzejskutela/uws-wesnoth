#define BR_CONFIGURE_RANDOM_BONUSES
	[message]
		speaker=narrator
		message="Do you want to enable random bonus tiles across the map?"

		[option]
			message="Yes"
			[command]
				{VARIABLE qq_rb.enabled yes}
			[/command]
		[/option]
	  	[option]
			message="No"
			[command]
				{VARIABLE qq_rb.enabled no}
			[/command]
		[/option]
	[/message]

	[if]
		[variable]
			name=qq_rb.enabled
			boolean_equals=yes
		[/variable]
		[then]
			[message]
				speaker=narrator
				message="What is your preferred random bonus density?"

				[option]
					message="Very low, 1 bonus per 20 vertical hexes (5%)"
					[command]
						{VARIABLE qq_rb.density_divider 20}
					[/command]
				[/option]
			  	[option]
					message="Low, 1 bonus per 15 vertical hexes (6.67%)"
					[command]
						{VARIABLE qq_rb.density_divider 15}
					[/command]
				[/option]
				[option]
					message="Moderate, 1 bonus per 12 vertical hexes (8.33%)"
					[command]
						{VARIABLE qq_rb.density_divider 12}
					[/command]
				[/option]
				[option]
					message="Relatively dense, 1 bonus per 9 vertical hexes (11.1%)"
					[command]
						{VARIABLE qq_rb.density_divider 9}
					[/command]
				[/option]
				[option]
					message="High, 1 bonus per 6 vertical hexes (16.7%)"
					[command]
						{VARIABLE qq_rb.density_divider 6}
					[/command]
				[/option]
				[option]
					message="Very high, 1 bonus per 4 vertical hexes (25%)"
					[command]
						{VARIABLE qq_rb.density_divider 4}
					[/command]
				[/option]
			[/message]

			[message]
				speaker=narrator
				message="What about the relative strength of the bonuses?
Numbers describe the probability of getting a weak/moderate/strong/extreme bonus."

				[option]
					message="Weak bonuses only (100/0/0/0)"
					[command]
						{VARIABLE qq_rb.weak_spread 100}
						{VARIABLE qq_rb.medium_spread 100}
						{VARIABLE qq_rb.strong_spread 100}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.spread_name "Weak only"}
					[/command]
				[/option]
			  	[option]
					message="Low strength (70/30/0/0)"
					[command]
						{VARIABLE qq_rb.weak_spread 70}
						{VARIABLE qq_rb.medium_spread 100}
						{VARIABLE qq_rb.strong_spread 100}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.spread_name "Low"}
					[/command]
				[/option]
				[option]
					message="Moderate strength (50/35/15/0)"
					[command]
						{VARIABLE qq_rb.weak_spread 50}
						{VARIABLE qq_rb.medium_spread 86}
						{VARIABLE qq_rb.strong_spread 100}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.spread_name "Moderate"}
					[/command]
				[/option]
				[option]
					message="Normal strength (45/35/15/5)"
					[command]
						{VARIABLE qq_rb.weak_spread 45}
						{VARIABLE qq_rb.medium_spread 8}
						{VARIABLE qq_rb.strong_spread 95}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.spread_name "Normal"}
					[/command]
				[/option]
				[option]
					message="Strong bonuses (30/35/25/10)"
					[command]
						{VARIABLE qq_rb.weak_spread 30}
						{VARIABLE qq_rb.medium_spread 65}
						{VARIABLE qq_rb.strong_spread 90}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.spread_name "Strong"}
					[/command]
				[/option]
				[option]
					message="Very strong bonuses (20/30/30/20)"
					[command]
						{VARIABLE qq_rb.weak_spread 20}
						{VARIABLE qq_rb.medium_spread 50}
						{VARIABLE qq_rb.strong_spread 80}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.spread_name "Very strong"}
					[/command]
				[/option]
				[option]
					message="Armageddon (0/30/40/30)"
					[command]
						{VARIABLE qq_rb.weak_spread 0}
						{VARIABLE qq_rb.medium_spread 30}
						{VARIABLE qq_rb.strong_spread 70}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.spread_name "Armaggedon"}
					[/command]
				[/option]
			[/message]

			{VARIABLE qq_rb.relative_strength_indicator "$( floor(($qq_rb.weak_spread + 2 * ($qq_rb.medium_spread - $qq_rb.weak_spread) + 4 * ($qq_rb.strong_spread - $qq_rb.medium_spread) + 8 * ($qq_rb.extreme_spread - $qq_rb.strong_spread)) / 20) ^ 2)"}

			[message]
				speaker=narrator
				message="What is the desired bonus distribution?"

				[option]
					message="Fully random"
					[command]
						{VARIABLE qq_rb.distribution random}
					[/command]
				[/option]
			  	[option]
					message="Mirror across the vertical axis"
					[command]
						{VARIABLE qq_rb.distribution vertical}
					[/command]
				[/option]
				[option]
					message="Mirror across the horizontal axis"
					[command]
						{VARIABLE qq_rb.distribution horizontal}
					[/command]
				[/option]
				[option]
					message="Mirror across both axes"
					[command]
						{VARIABLE qq_rb.distribution both}
					[/command]
				[/option]
			[/message]

			[if]
				[variable]
					name=qq_rb.distribution
					not_equals=random
				[/variable]
				[then]
					[message]
						speaker=narrator
						message="Is strict mirroring desired?"

						[option]
							message="Yes, mirror the same bonuses and locations"
							[command]
								{VARIABLE qq_rb.mirroring all}
							[/command]
						[/option]
						[option]
							message="Only maintain the same relative density"
							[command]
								{VARIABLE qq_rb.mirroring density}
							[/command]
						[/option]
					[/message]
				[/then]
			[/if]
		[/then]
	[/if]

	[lua]
		name=uws_rb_info
	    code = <<
	        local random_bonuses_enabled = wml.variables['qq_rb.enabled']
	        local density = wml.variables['qq_rb.density_divider']
	        local distribution = wml.variables["qq_rb.distribution"]
	        local mirroring = wml.variables["qq_rb.mirroring"]
	        local strength = wml.variables["qq_rb.spread_name"]
	        local strength_relative = wml.variables["qq_rb.relative_strength_indicator"]
	        local strength_weak = wml.variables["qq_rb.weak_spread"]
	        local strength_medium = wml.variables["qq_rb.medium_spread"]
	        local strength_strong = wml.variables["qq_rb.strong_spread"]
	        local strength_extreme = wml.variables["qq_rb.extreme_spread"]

	        local bonuses_settings = strength .. ' bonuses (r=' .. strength_relative .. ') 1/' .. density .. ' | Distribution: ' .. distribution

	        if distribution ~= 'random' then
	        	bonuses_settings = bonuses_settings .. ' (' .. mirroring .. ' mirroring)'
	        end
	        
	        wesnoth.interface.add_chat_message("UWS Random Bonuses", bonuses_settings)
	        
	        wml.variables['qq_rb.game_info_data'] = "\
" .. bonuses_settings
	    >>
	[/lua]
#enddef

#define BR_GATHER_LOCATIONS
	[set_variables]
		name=qqrb_bonuses
		mode=replace
	[/set_variables]

	[store_map_dimensions]
		variable=map_size
	[/store_map_dimensions]

	[lua]
		name=uws_rb_gather_locations
		code = <<
			local map_width = wml.variables['map_size.width']
			local map_height = wml.variables['map_size.height']
			local density_divider = wml.variables['qq_rb.density_divider']
			local distribution = wml.variables['qq_rb.distribution']
			local mirroring = wml.variables['qq_rb.mirroring']

			local minimum_square_n = -1
			local minimum_square_m = -1

			local locations = {}
			local all_available_locations = {}
			local y_min = -1
			local y_max = -1
			local bonus_group_id = 0

			if distribution == 'random' then
				minimum_square_n = map_width - 1
				minimum_square_m = map_height - 1
			elseif distribution == 'vertical' then
				minimum_square_n = math.ceil(map_width / 2.0)
				minimum_square_m = map_height - 1
			elseif distribution == 'horizontal' then
				minimum_square_n = map_width - 1
				minimum_square_m = math.ceil(map_height / 2.0)
			elseif distribution == 'both' then
				minimum_square_n = math.ceil(map_width / 2.0)
				minimum_square_m = math.ceil(map_height / 2.0)
			end

			for i=1,minimum_square_m,density_divider do
				y_min = i
				y_max = i + density_divider - 1
				if y_max > minimum_square_m then
					y_max = minimum_square_m
				end

				bonus_group_id = bonus_group_id + 1
				all_available_locations = wesnoth.map.find { x = '1-' .. tostring(minimum_square_n), y = tostring(y_min) .. '-' .. tostring(y_max), terrain = '!,_off^_usr,X*,Q*,*^X*,Wo*,*^V*,Mv' }
				mathx.shuffle(all_available_locations)

				if distribution == 'random' then
					locations[#locations + 1] = { ['x'] = all_available_locations[1].x, ['y'] = all_available_locations[1].y, ['id'] = bonus_group_id }
				elseif distribution == 'vertical' then
					if mirroring == 'all' then
						locations[#locations + 1] = { ['x'] = all_available_locations[1].x, ['y'] = all_available_locations[1].y, ['id'] = bonus_group_id }
						locations[#locations + 1] = { ['x'] = map_width - all_available_locations[1].x, ['y'] = all_available_locations[1].y, ['id'] = bonus_group_id }
					elseif mirroring == 'density' then
						locations[#locations + 1] = { ['x'] = all_available_locations[1].x, ['y'] = all_available_locations[1].y, ['id'] = bonus_group_id }
						bonus_group_id = bonus_group_id + 1
						locations[#locations + 1] = { ['x'] = map_width - all_available_locations[2].x, ['y'] = all_available_locations[2].y, ['id'] = bonus_group_id }
					end
				elseif distribution == 'horizontal' then
					if mirroring == 'all' then
						locations[#locations + 1] = { ['x'] = all_available_locations[1].x, ['y'] = all_available_locations[1].y, ['id'] = bonus_group_id }
						locations[#locations + 1] = { ['x'] = all_available_locations[1].x, ['y'] = map_height - all_available_locations[1].y, ['id'] = bonus_group_id }
					elseif mirroring == 'density' then
						locations[#locations + 1] = { ['x'] = all_available_locations[1].x, ['y'] = all_available_locations[1].y, ['id'] = bonus_group_id }
						bonus_group_id = bonus_group_id + 1
						locations[#locations + 1] = { ['x'] = all_available_locations[2].x, ['y'] = map_height - all_available_locations[2].y, ['id'] = bonus_group_id }
					end
				elseif distribution == 'both' then
					if mirroring == 'all' then
						locations[#locations + 1] = { ['x'] = all_available_locations[1].x, ['y'] = all_available_locations[1].y, ['id'] = bonus_group_id }
						locations[#locations + 1] = { ['x'] = map_width - all_available_locations[1].x, ['y'] = map_height - all_available_locations[1].y, ['id'] = bonus_group_id }
					elseif mirroring == 'density' then
						locations[#locations + 1] = { ['x'] = all_available_locations[1].x, ['y'] = all_available_locations[1].y, ['id'] = bonus_group_id }
						bonus_group_id = bonus_group_id + 1
						locations[#locations + 1] = { ['x'] = map_width - all_available_locations[2].x, ['y'] = map_height - all_available_locations[2].y, ['id'] = bonus_group_id }
					end
				end
			end

			wml.array_access.set("qqrb_bonuses", locations)
		>>
	[/lua]
#enddef

#define BR_GENERATE_NEW_BONUSES
	[set_variables]
		name=qqrb_bonus_selector
		mode=replace
	[/set_variables]

	[for]
		array=qqrb_bonuses
		variable=i
		[do]
			[if]
				[variable]
					name=qqrb_bonus_selector[$i].bonus
					equals=""
				[/variable]
				[then]
					{BR_SELECT_SINGLE_BONUS qqrb_bonus_selector[$i].bonus}
				[/then]
			[/if]

			{VARIABLE qqrb_bonuses[$i].bonus_code $qqrb_bonus_selector[$i].bonus}
		[/do]
	[/for]
#enddef

#define BR_SELECT_SINGLE_BONUS VAR
	{VARIABLE_OP br_rand rand 0..99}
	[if]
		[variable]
			name=br_rand
			less_than=$qq_rb.weak_spread
		[/variable]
		[then]
			{VARIABLE_OP {VAR} rand $qqrb_available_bonuses.weak}
		[/then]
		[else]
			[if]
				[variable]
					name=br_rand
					less_than=$qq_rb.medium_spread
				[/variable]
				[then]
					{VARIABLE_OP {VAR} rand $qqrb_available_bonuses.medium}
				[/then]
				[else]
					[if]
						[variable]
							name=br_rand
							less_than=$qq_rb.strong_spread
						[/variable]
						[then]
							{VARIABLE_OP {VAR} rand $qqrb_available_bonuses.strong}
						[/then]
						[else]
							{VARIABLE_OP {VAR} rand $qqrb_available_bonuses.extreme}
						[/else]
					[/if]
				[/else]
			[/if]
		[/else]
	[/if]
#enddef

#define BR_RENDER_NEW_BONUSES
	
#enddef

#define BR_APPLY_BONUSES

#enddef

#define BR_CLEAR_BONUSES

#enddef
