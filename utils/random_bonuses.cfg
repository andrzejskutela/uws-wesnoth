#define RB_CONFIGURE_RANDOM_BONUSES
	[message]
		speaker=narrator
		caption="UWS Bonus Manager"
		image="portraits/uws/saber.png"
		message="Do you want to enable random bonus tiles across the map?"

		[option]
			message="Yes"
			[command]
				{VARIABLE qq_rb.enabled yes}
			[/command]
		[/option]
	  	[option]
			message="No"
			[command]
				{VARIABLE qq_rb.enabled no}
			[/command]
		[/option]
	[/message]

	[if]
		[variable]
			name=qq_rb.enabled
			boolean_equals=yes
		[/variable]
		[then]
			[message]
				speaker=narrator
				caption="Guardian of the Black Gorge"
				image="portraits/uws/dspearman.png"
				message="What is your preferred random bonus density?"

				[option]
					message="Very low, relative density <span color='#4abd33'>~5%</span>"
					[command]
						{VARIABLE qq_rb.density_divider 22}
						{VARIABLE qq_rb.density_readable "very low"}
					[/command]
				[/option]
			  	[option]
					message="Low, relative density <span color='#97c746'>~8.6%</span>"
					[command]
						{VARIABLE qq_rb.density_divider 13}
						{VARIABLE qq_rb.density_readable "low"}
					[/command]
				[/option]
				[option]
					message="Moderate, relative density <span color='#dec33e'>~12.6%</span>"
					[command]
						{VARIABLE qq_rb.density_divider 9}
						{VARIABLE qq_rb.density_readable "moderate"}
					[/command]
				[/option]
				[option]
					message="High, relative density <span color='#de8e3e'>~19.7%</span>"
					[command]
						{VARIABLE qq_rb.density_divider 6}
						{VARIABLE qq_rb.density_readable "high"}
					[/command]
				[/option]
				[option]
					message="Very high, relative density <span color='#de563e'>~31.5%</span>"
					[command]
						{VARIABLE qq_rb.density_divider 4}
						{VARIABLE qq_rb.density_readable "very high"}
					[/command]
				[/option]
			[/message]

			[message]
				speaker=narrator
				caption="Infernal Kitty Kitty Kitten"
				image="portraits/uws/black-cat.png"
				message="What about the relative strength of the bonuses?
Numbers describe the probability of getting a weak/moderate/strong/extreme/mythical bonus."

				[option]
					message="<span color='#4abd33'>Weak</span> bonuses only (100/0/0/0/0)"
					[command]
						{VARIABLE qq_rb.weak_spread 100}
						{VARIABLE qq_rb.medium_spread 100}
						{VARIABLE qq_rb.strong_spread 100}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.mythical_spread 100}
						{VARIABLE qq_rb.spread_name "weak only"}
					[/command]
				[/option]
			  	[option]
					message="<span color='#92d154'>Low</span> strength (70/30/0/0/0)"
					[command]
						{VARIABLE qq_rb.weak_spread 70}
						{VARIABLE qq_rb.medium_spread 100}
						{VARIABLE qq_rb.strong_spread 100}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.mythical_spread 100}
						{VARIABLE qq_rb.spread_name "low"}
					[/command]
				[/option]
				[option]
					message="<span color='#c5d645'>Moderate</span> strength (50/35/15/0/0)"
					[command]
						{VARIABLE qq_rb.weak_spread 50}
						{VARIABLE qq_rb.medium_spread 86}
						{VARIABLE qq_rb.strong_spread 100}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.mythical_spread 100}
						{VARIABLE qq_rb.spread_name "moderate"}
					[/command]
				[/option]
				[option]
					message="<span color='#dec33e'>Normal</span> strength (45/35/15/5/0)"
					[command]
						{VARIABLE qq_rb.weak_spread 45}
						{VARIABLE qq_rb.medium_spread 8}
						{VARIABLE qq_rb.strong_spread 95}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.mythical_spread 100}
						{VARIABLE qq_rb.spread_name "normal"}
					[/command]
				[/option]
				[option]
					message="<span color='#de8e3e'>Strong</span> bonuses (30/35/25/10/0)"
					[command]
						{VARIABLE qq_rb.weak_spread 30}
						{VARIABLE qq_rb.medium_spread 65}
						{VARIABLE qq_rb.strong_spread 90}
						{VARIABLE qq_rb.extreme_spread 100}
						{VARIABLE qq_rb.mythical_spread 100}
						{VARIABLE qq_rb.spread_name "strong"}
					[/command]
				[/option]
				[option]
					message="<span color='#de563e'>Very strong</span> bonuses (20/30/30/15/5)"
					[command]
						{VARIABLE qq_rb.weak_spread 20}
						{VARIABLE qq_rb.medium_spread 50}
						{VARIABLE qq_rb.strong_spread 80}
						{VARIABLE qq_rb.extreme_spread 95}
						{VARIABLE qq_rb.mythical_spread 100}
						{VARIABLE qq_rb.spread_name "very strong"}
					[/command]
				[/option]
				[option]
					message="<span color='#7a3331'>Armageddon</span> (0/30/30/30/10)"
					[command]
						{VARIABLE qq_rb.weak_spread 0}
						{VARIABLE qq_rb.medium_spread 30}
						{VARIABLE qq_rb.strong_spread 60}
						{VARIABLE qq_rb.extreme_spread 90}
						{VARIABLE qq_rb.mythical_spread 100}
						{VARIABLE qq_rb.spread_name "armaggedon"}
					[/command]
				[/option]
			[/message]

			{VARIABLE qq_rb.relative_strength_indicator "$( floor(($qq_rb.weak_spread + 2 * ($qq_rb.medium_spread - $qq_rb.weak_spread) + 4 * ($qq_rb.strong_spread - $qq_rb.medium_spread) + 8 * ($qq_rb.extreme_spread - $qq_rb.strong_spread) + 16 * ($qq_rb.mythical_spread - $qq_rb.extreme_spread)) / 20) ^ 2)"}

			[message]
				speaker=narrator
				caption="Ageless Stone Titan"
				image="portraits/uws/stone.png"
				message="What is the desired bonus distribution?"

				[option]
					message="Fully random"
					[command]
						{VARIABLE qq_rb.distribution random}
					[/command]
				[/option]
			  	[option]
					message="Mirror across the vertical axis"
					[command]
						{VARIABLE qq_rb.distribution vertical}
					[/command]
				[/option]
				[option]
					message="Mirror across the horizontal axis"
					[command]
						{VARIABLE qq_rb.distribution horizontal}
					[/command]
				[/option]
				[option]
					message="Mirror across both axes"
					[command]
						{VARIABLE qq_rb.distribution both}
					[/command]
				[/option]
			[/message]

			[if]
				[variable]
					name=qq_rb.distribution
					not_equals=random
				[/variable]
				[then]
					[message]
						speaker=narrator
						caption="Butcher of Forgotten Lands"
						image="portraits/uws/blood-hulk.png"
						message="Is strict mirroring desired?"

						[option]
							message="Yes, mirror the same bonuses and locations"
							[command]
								{VARIABLE qq_rb.mirroring all}
							[/command]
						[/option]
						[option]
							message="Only maintain the same relative density"
							[command]
								{VARIABLE qq_rb.mirroring density}
							[/command]
						[/option]
					[/message]
				[/then]
			[/if]
		[/then]
	[/if]

	[lua]
		name=uws_rb_info
	    code = <<
	        local random_bonuses_enabled = wml.variables['qq_rb.enabled']
	        local density = wml.variables['qq_rb.density_divider']
	        local distribution = wml.variables["qq_rb.distribution"]
	        local mirroring = wml.variables["qq_rb.mirroring"]
	        local strength = wml.variables["qq_rb.spread_name"]
	        local strength_relative = wml.variables["qq_rb.relative_strength_indicator"]
	        local strength_weak = wml.variables["qq_rb.weak_spread"]
	        local strength_medium = wml.variables["qq_rb.medium_spread"]
	        local strength_strong = wml.variables["qq_rb.strong_spread"]
	        local strength_extreme = wml.variables["qq_rb.extreme_spread"]
	        local density_readable = wml.variables["qq_rb.density_readable"]

	        local bonuses_settings = strength .. ' bonuses (r=' .. strength_relative .. ') ' .. density_readable .. ' density, '

	        if distribution ~= 'random' then
	        	local axis_info = "mirrored along " .. distribution .. " axis"
	        	if distribution == 'both' then
	        		axis_info = "mirrored along both axes"
	        	end

	        	if mirroring == 'density' then
	        		axis_info = 'distribution ' .. axis_info
	        	end

	        	bonuses_settings = bonuses_settings .. axis_info
	        else
	        	bonuses_settings = bonuses_settings .. ' random distribution'
	        end
	        
	        wesnoth.interface.add_chat_message("UWS Random Bonuses", bonuses_settings)
	        wesnoth.interface.add_chat_message("UWS Random Bonuses", "Random bonuses are in alpha release, issues are expected. If you find any please report to quequo. Thank you.")
	        
	        wml.variables['qq_rb.game_info_data'] = "\
" .. bonuses_settings
	    >>
	[/lua]
#enddef

#define RB_DEFINE_RANDOM_BONUS_BUCKETS
	[lua]
		name=uws_rb_prepare_bonus_buckets
		code = <<
			local all_definitions = wml.array_access.get("qqrb_bonus_definitions")
			local allow = {
				['xp'] = wml.variables['qqrb_allow_xp'],
				['max_xp_red'] = wml.variables['qqrb_allow_max_xp_red'],
				['reheal'] = wml.variables['qqrb_allow_reheal'],
				['hp'] = wml.variables['qqrb_allow_hp'],
				['dmg'] = wml.variables['qqrb_allow_dmg'],
				['dmg_both'] = wml.variables['qqrb_allow_dmg'],
				['str'] = wml.variables['qqrb_allow_str'],
				['str_single_range'] = wml.variables['qqrb_allow_str'],
				['str_mr'] = wml.variables['qqrb_allow_str'],
				['acc'] = wml.variables['qqrb_allow_acc'],
				['parry'] = wml.variables['qqrb_allow_parry'],
				['mp'] = wml.variables['qqrb_allow_mp'],
				['res'] = wml.variables['qqrb_allow_res'],
				['group_res'] = wml.variables['qqrb_allow_res'],
				['def'] = wml.variables['qqrb_allow_def'],
				['abilities'] = wml.variables['qqrb_allow_abilities'],
				['weapons'] = wml.variables['qqrb_allow_weapons'],
				['mercs'] = wml.variables['qqrb_allow_mercs'],
				['loyal'] = wml.variables['qqrb_allow_loyal'],
				['copy'] = wml.variables['qqrb_allow_copy'],
				['gold'] = wml.variables['qqrb_allow_gold'],
			}

			local buckets = {}
			local group = ''
			for k,v in pairs(all_definitions[2]) do
				group = all_definitions[1][k]

				if allow[group] == true then
					if buckets[v] == nil then
						buckets[v] = {}
					end

					table.insert(buckets[v], k)
				end
			end

			for k,v in pairs(buckets) do
				wml.variables['qqrb_available_bonuses.' .. k] = table.concat(v, ',')
			end
		>>
	[/lua]
#enddef

#define RB_GATHER_LOCATIONS
	[set_variables]
		name=qqrb_bonuses
		mode=replace
	[/set_variables]

	[store_map_dimensions]
		variable=map_size
	[/store_map_dimensions]

	[lua]
		name=uws_rb_gather_locations
		code = <<
			local map_width = wml.variables['map_size.width'] + 1
			local map_height = wml.variables['map_size.height'] + 1
			local density_divider = wml.variables['qq_rb.density_divider']
			local distribution = wml.variables['qq_rb.distribution']
			local mirroring = wml.variables['qq_rb.mirroring']

			local minimum_square_n = -1
			local minimum_square_m = -1

			local locations = {}
			local all_available_locations = {}
			local y_min = -1
			local y_max = -1
			local bonus_group_id = -1
			local available_locs_index = -1
			local iterations = 0
			local multi_iterations_rand = -1

			if distribution == 'random' then
				minimum_square_n = map_width - 1
				minimum_square_m = map_height - 1
			elseif distribution == 'vertical' then
				minimum_square_n = math.ceil(map_width / 2.0) - 1
				minimum_square_m = map_height - 1
			elseif distribution == 'horizontal' then
				minimum_square_n = map_width - 1
				minimum_square_m = math.ceil(map_height / 2.0) - 1
			elseif distribution == 'both' then
				minimum_square_n = math.ceil(map_width / 2.0) - 1
				minimum_square_m = math.ceil(map_height / 2.0) - 1
			end

			for i=1,minimum_square_m,density_divider do
				y_min = i
				y_max = i + density_divider - 1
				if y_max > minimum_square_m then
					y_max = minimum_square_m
				end

				all_available_locations = wesnoth.map.find { x = '1-' .. tostring(minimum_square_n), y = tostring(y_min) .. '-' .. tostring(y_max), terrain = '!,_off^_usr,X*,Q*,*^X*,Wo*,*^V*,Mv' }

				if #all_available_locations > 12 then
					
					available_locs_index = 1
					mathx.shuffle(all_available_locations)
					multi_iterations_rand = mathx.random(0, 99)

					iterations = 1
					if multi_iterations_rand < math.floor(100 / density_divider) then
						iterations = iterations + 1
					end

					if multi_iterations_rand < 2 then
						iterations = iterations + 1
					end

					if multi_iterations_rand > 75 then
						if distribution == 'random' then
							iterations = iterations + 2
						elseif distribution == 'horizontal' or distribution == 'vertical' then
							iterations = iterations + 1
						end
					end

					if multi_iterations_rand > 99 - density_divider then
						iterations = 0
					end

					for j=1,iterations,1 do
						bonus_group_id = bonus_group_id + 1

						if distribution == 'random' then
							locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
							available_locs_index = available_locs_index + 1
						elseif distribution == 'vertical' then
							if mirroring == 'all' then
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								locations[#locations + 1] = { ['x'] = map_width - all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								available_locs_index = available_locs_index + 1
							elseif mirroring == 'density' then
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								bonus_group_id = bonus_group_id + 1
								locations[#locations + 1] = { ['x'] = map_width - all_available_locations[available_locs_index + 1].x, ['y'] = all_available_locations[available_locs_index + 1].y, ['id'] = bonus_group_id }
								available_locs_index = available_locs_index + 2
							end
						elseif distribution == 'horizontal' then
							if mirroring == 'all' then
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = map_height - all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								available_locs_index = available_locs_index + 1
							elseif mirroring == 'density' then
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								bonus_group_id = bonus_group_id + 1
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index + 1].x, ['y'] = map_height - all_available_locations[available_locs_index + 1].y, ['id'] = bonus_group_id }
								available_locs_index = available_locs_index + 2
							end
						elseif distribution == 'both' then
							if mirroring == 'all' then
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								locations[#locations + 1] = { ['x'] = map_width - all_available_locations[available_locs_index].x, ['y'] = map_height - all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = map_height - all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								locations[#locations + 1] = { ['x'] = map_width - all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								available_locs_index = available_locs_index + 1
							elseif mirroring == 'density' then
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index].x, ['y'] = all_available_locations[available_locs_index].y, ['id'] = bonus_group_id }
								bonus_group_id = bonus_group_id + 1
								locations[#locations + 1] = { ['x'] = map_width - all_available_locations[available_locs_index + 1].x, ['y'] = map_height - all_available_locations[available_locs_index + 1].y, ['id'] = bonus_group_id }
								bonus_group_id = bonus_group_id + 1
								locations[#locations + 1] = { ['x'] = all_available_locations[available_locs_index + 2].x, ['y'] = map_height - all_available_locations[available_locs_index + 2].y, ['id'] = bonus_group_id }
								bonus_group_id = bonus_group_id + 1
								locations[#locations + 1] = { ['x'] = map_width - all_available_locations[available_locs_index + 3].x, ['y'] = all_available_locations[available_locs_index + 3].y, ['id'] = bonus_group_id }
								available_locs_index = available_locs_index + 4
							end
						end
					end
				end
			end

			wml.array_access.set("qqrb_bonuses", locations)
		>>
	[/lua]
#enddef

#define RB_GENERATE_NEW_BONUSES
	[set_variables]
		name=qqrb_bonus_selector
		mode=replace
	[/set_variables]

	[for]
		array=qqrb_bonuses
		variable=i
		[do]
			{VARIABLE bonus_unique_key $qqrb_bonuses[$i].id}
			
			[if]
				[variable]
					name=qqrb_bonus_selector[$bonus_unique_key].bonus_code
					equals=""
				[/variable]
				[then]
					# in this if random all the values so they can be copied over in case of mirroring
					{RB_SELECT_BONUS_BUCKET}

					[if]
						[variable]
							name=qqrb_bonus_bucket
							equals=""
						[/variable]
						[then]
							{VARIABLE randomed_bonus "nothing"}
						[/then]
						[else]
							{VARIABLE_OP randomed_bonus rand $qqrb_bonus_bucket}
						[/else]
					[/if]

					{VARIABLE qqrb_bonus_selector[$bonus_unique_key].bonus_code $randomed_bonus}

					[for]
						variable=j
						start=1
						end=$qqrb_bonus_definitions[2].$randomed_bonus
						step=1
						[do]
							{VARIABLE param_key "$( 2 + $j )"}
							{VARIABLE_OP qqrb_bonus_selector[$bonus_unique_key].param_$j rand $qqrb_bonus_definitions[$param_key].$randomed_bonus}
						[/do]
					[/for]

					{RB_READABLE_NAME_GENERATOR qqrb_bonus_definitions[0].$randomed_bonus qqrb_bonus_selector[$bonus_unique_key]}
					{VARIABLE qqrb_bonus_selector[$bonus_unique_key].strength $qqrb_bonus_definitions[1].$randomed_bonus}
				[/then]
			[/if]

			# copy all the already randomed values while maintaining mirroring
			{VARIABLE current_bonus $qqrb_bonus_selector[$bonus_unique_key].bonus_code}
			{VARIABLE qqrb_bonuses[$i].bonus_code $qqrb_bonus_selector[$bonus_unique_key].bonus_code}
			{VARIABLE qqrb_bonuses[$i].strength $qqrb_bonus_selector[$bonus_unique_key].strength}
			{VARIABLE qqrb_bonuses[$i].bonus_readable $qqrb_bonus_selector[$bonus_unique_key].bonus_readable}
			{VARIABLE qqrb_bonuses[$i].apply_group $qqrb_bonus_definitions[0].$current_bonus}

			# copy the randomed parameters while maintaining mirroring
			[for]
				variable=j
				start=1
				end=$qqrb_bonus_definitions[2].$current_bonus
				step=1
				[do]
					{VARIABLE qqrb_bonuses[$i].param_$j $qqrb_bonus_selector[$bonus_unique_key].param_$j}
				[/do]
			[/for]
		[/do]
	[/for]
#enddef

#define RB_SELECT_BONUS_BUCKET
	{VARIABLE_OP rb_rand rand 0..99}
	[if]
		[variable]
			name=rb_rand
			less_than=$qq_rb.weak_spread
		[/variable]
		[then]
			{VARIABLE qqrb_bonus_bucket $qqrb_available_bonuses.weak}
		[/then]
		[else]
			[if]
				[variable]
					name=rb_rand
					less_than=$qq_rb.medium_spread
				[/variable]
				[then]
					{VARIABLE qqrb_bonus_bucket $qqrb_available_bonuses.medium}
				[/then]
				[else]
					[if]
						[variable]
							name=rb_rand
							less_than=$qq_rb.strong_spread
						[/variable]
						[then]
							{VARIABLE qqrb_bonus_bucket $qqrb_available_bonuses.strong}
						[/then]
						[else]
							[if]
								[variable]
									name=rb_rand
									less_than=$qq_rb.extreme_spread
								[/variable]
								[then]
									{VARIABLE qqrb_bonus_bucket $qqrb_available_bonuses.extreme}
								[/then]
								[else]
									{VARIABLE qqrb_bonus_bucket $qqrb_available_bonuses.mythical}
								[/else]
							[/if]
						[/else]
					[/if]
				[/else]
			[/if]
		[/else]
	[/if]
#enddef

#define RB_RENDER_NEW_BONUSES
	[for]
		array=qqrb_bonuses
		variable=i
		[do]
			[label]
				x=$qqrb_bonuses[$i].x
				y=$qqrb_bonuses[$i].y
				text="<span color='#8dab46' size='small'>$qqrb_bonuses[$i].bonus_readable</span>"
			[/label]

			[item]
				x=$qqrb_bonuses[$i].x
				y=$qqrb_bonuses[$i].y
				halo="halo/elven/faerie-fire-halo[1~7].png:125"
				visible_in_fog=no
			[/item]
		[/do]
	[/for]
#enddef

#define RB_CLEAR_BONUSES
	[for]
		array=qqrb_bonuses
		variable=i
		[do]
			[label]
				x=$qqrb_bonuses[$i].x
				y=$qqrb_bonuses[$i].y
				text=""
			[/label]

			[remove_item]
				x=$qqrb_bonuses[$i].x
				y=$qqrb_bonuses[$i].y
				image="halo/elven/faerie-fire-halo[1~7].png:125"
			[/remove_item]
		[/do]
	[/for]

	{CLEAR_VARIABLE qqrb_bonuses,qqrb_bonus_selector}
#enddef

#define RB_APPLY_BONUSES
	[for]
		array=qqrb_bonuses
		variable=i
		[do]
			[if]
				[have_unit]
					x=$qqrb_bonuses[$i].x
					y=$qqrb_bonuses[$i].y
				[/have_unit]
				[then]
					[fire_event]
						name=qqrb_apply_bonus
						[primary_unit]
							x=$qqrb_bonuses[$i].x
							y=$qqrb_bonuses[$i].y
						[/primary_unit]
					[/fire_event]
				[/then]
			[/if]
		[/do]
	[/for]
#enddef
