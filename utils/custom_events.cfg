#define QQUWS_NEW_UNIT_BONUS
	[event]
		name=apply_new_unit_bonus
		first_time_only=no
		
		[store_unit_type]
			type=$spawn_type
			variable=spawned_unit_type
			mode=always_clear
		[/store_unit_type]
		
		[if]
			[variable]
				name=new_unit_bulky_value
				greater_than=0
			[/variable]
			[then]
				{VARIABLE scale_bulky_from_value $new_unit_bulky_value}
				[fire_event]
					name=get_unit_main_image_dimensions
				[/fire_event]
				
				{VARIABLE tmp_bulky_value $new_unit_bulky_value}
				{VARIABLE_OP tmp_bulky_value multiply $uws_game.buff_modifier}
				{VARIABLE_OP tmp_bulky_value round 1}
				
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
					
					[object]
						silent=yes
						
						[effect]
							apply_to=hitpoints
							increase="$tmp_bulky_value|%"
							increase_total="$tmp_bulky_value|%"
						[/effect]
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=bulky
									name="bulky"
									description="This is a bulky warrior, it's hp is $tmp_bulky_value|% greater than normal.
(modifier x$uws_game.buff_modifier|)"
								[/dummy]
							[/abilities]
						[/effect]
					[/object]
				[/modify_unit]
				
				[if]
					[variable]
						name=spawn_final_boss
						boolean_equals=no
					[/variable]
					[then]
						[modify_unit]
							[filter]
								id=$new_unit_spawn_id
							[/filter]
							
							[variables]
								image_base_w=$bulky_image_width
								image_base_h=$bulky_image_height
							[/variables]
								
							[object]
								silent=yes
								
								[effect]
									apply_to=image_mod
									add="~SCALE_INTO_SHARP($bulky_image_width,$bulky_image_height)"
								[/effect]
							[/object]
						[/modify_unit]
					[/then]
				[/if]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_armored_value
				greater_than=0
			[/variable]
			[then]
				{VARIABLE tmp_armored_value $new_unit_armored_value}
				{VARIABLE_OP tmp_armored_value multiply $uws_game.buff_modifier}
				{VARIABLE_OP tmp_armored_value round floor}
				
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
						
					[object]
						silent=yes
						
						[effect]
							apply_to=resistance
							replace=no
							[resistance]
								arcane=-$tmp_armored_value
								fire=-$tmp_armored_value
								cold=-$tmp_armored_value
								blade=-$tmp_armored_value
								impact=-$tmp_armored_value
								pierce=-$tmp_armored_value
							[/resistance]
						[/effect]
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=armored
									name="armored"
									description="This is an armored warrior, it's resistances are $tmp_armored_value|% greater than normal.
(modifier x$uws_game.buff_modifier|)"
								[/dummy]
							[/abilities]
						[/effect]
						[effect]
							apply_to=image_mod
							add="~RC(magenta>rails)"
						[/effect]
					[/object]
				[/modify_unit]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_beefy_value
				greater_than=0
			[/variable]
			[then]
				{VARIABLE blend_amount 0.12}
				[if]
					[variable]
						name=new_unit_beefy_value
						greater_than=38
					[/variable]
					[then]
						{VARIABLE blend_amount 0.2}
					[/then]
				[/if]
				
				{VARIABLE tmp_bulky_value $new_unit_beefy_value}
				{VARIABLE_OP tmp_bulky_value multiply $uws_game.buff_modifier}
				{VARIABLE_OP tmp_bulky_value round 1}
				
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
						
					[object]
						silent=yes
						
						[effect]
							apply_to=attack
							increase_damage="$tmp_bulky_value|%"
						[/effect]
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=beefy
									name="beefy"
									description="This is a beefy warrior, it's damage is $tmp_bulky_value|% greater than normal.
(modifier x$uws_game.buff_modifier|)"
								[/dummy]
							[/abilities]
						[/effect]
					[/object]
				[/modify_unit]
						
				[if]
					[variable]
						name=spawn_final_boss
						boolean_equals=no
					[/variable]
					[then]
						[modify_unit]
							[filter]
								id=$new_unit_spawn_id
							[/filter]
								
							[object]
								silent=yes
								
								[effect]
									apply_to=image_mod
									add="~BLEND(250,45,45,$blend_amount)"
								[/effect]
							[/object]
						[/modify_unit]
					[/then]
				[/if]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_fast_value
				greater_than=0
			[/variable]
			[then]
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
						
					[object]
						silent=yes
						
						[effect]
						    apply_to=movement
						    increase=$new_unit_fast_value
						[/effect]
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=fast
									name="fast"
									description="This is a fast moving warrior, it's movement is greater than normal by $new_unit_fast_value point(s).
(modifier x$uws_game.buff_modifier|)"
								[/dummy]
							[/abilities]
						[/effect]
						[effect]
							apply_to=image_mod
							add="~CS(25,25,25)"
						[/effect]
					[/object]
				[/modify_unit]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_agile_value
				greater_than=0
			[/variable]
			[then]
				{VARIABLE tmp_armored_value $new_unit_agile_value}
				{VARIABLE_OP tmp_armored_value multiply $uws_game.buff_modifier}
				{VARIABLE_OP tmp_armored_value round floor}
				
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
						
					[object]
						silent=yes
						
						[effect]
							apply_to=defense
							replace=no
							[defense]
								flat=-$tmp_armored_value
								frozen=-$tmp_armored_value
								forest=-$tmp_armored_value
								village=-$tmp_armored_value
								swamp_water=-$tmp_armored_value
								cave=-$tmp_armored_value
								reef=-$tmp_armored_value
								shallow_water=-$tmp_armored_value
								deep_water=-$tmp_armored_value
								fungus=-$tmp_armored_value
								hills=-$tmp_armored_value
								mountains=-$tmp_armored_value
								castle=-$tmp_armored_value
								sand=-$tmp_armored_value
							[/defense]
						[/effect]
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=agile
									name="agile"
									description="This is an agile warrior, it's defenses are greater than normal by $tmp_armored_value|.
(modifier x$uws_game.buff_modifier|)"
								[/dummy]
							[/abilities]
						[/effect]
						[effect]
							apply_to=image_mod
							add="~O(67%)"
						[/effect]
					[/object]
				[/modify_unit]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_spawn_champion
				not_equals=""
			[/variable]
			[then]
				{VARIABLE champion_unit_id $new_unit_spawn_id}
				{VARIABLE champion_settings_list $new_unit_spawn_champion}
				{VARIABLE champion_display_type_id champion}
				[fire_event]
					name=apply_champion_bonus
				[/fire_event]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_spawn_quiet_bonus_id
				not_equals=""
			[/variable]
			[then]
				{VARIABLE quiet_bonus_key $new_unit_spawn_quiet_bonus_id}
				{VARIABLE quiet_bonus_unit_id $new_unit_spawn_id}
				[fire_event]
					name=apply_quiet_bonus
				[/fire_event]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_spawn_minion
				not_equals=""
			[/variable]
			[then]
				{VARIABLE champion_unit_id $new_unit_spawn_id}
				{VARIABLE champion_settings_list $new_unit_spawn_minion}
				{VARIABLE champion_display_type_id minion}
				[fire_event]
					name=apply_champion_bonus
				[/fire_event]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_gold
				greater_than=0
			[/variable]
			[then]
				{VARIABLE display_gold_amount $new_unit_gold}
				[if]
					[variable]
						name=uws_game.mode
						equals=slash
					[/variable]
					[and]
						[variable]
							name=uws_game.single_player_game
							boolean_equals=no
						[/variable]
					[/and]
					[then]
						{VARIABLE_OP display_gold_amount divide 1.65}
						{VARIABLE_OP display_gold_amount round floor}
						{VARIABLE_OP display_gold_amount multiply 2}
					[/then]
				[/if]
				
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
						
					[object]
						silent=yes
						
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=has_gold
									name="<span color='#d1b064'>carries gold</span>"
									description="This unit carries $display_gold_amount gold."
								[/dummy]
							[/abilities]
						[/effect]
					[/object]
				[/modify_unit]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_has_item
				boolean_equals=yes
			[/variable]
			[then]
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
						
					[object]
						silent=yes
						
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=has_artifact
									name="<span color='#9e7bbd'>carries an artifact</span>"
									description="This unit carries a powerful item."
								[/dummy]
							[/abilities]
						[/effect]
					[/object]
				[/modify_unit]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=after_games.enable_spawn_copy_debuff
				boolean_equals=yes
			[/variable]
			[then]
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
						
					[object]
						silent=yes
						
						[effect]
							apply_to=hitpoints
							increase="$after_games_percentage|%"
							increase_total="$after_games_percentage|%"
						[/effect]
						[effect]
							apply_to=attack
							increase_damage="$after_games_percentage|%"
						[/effect]
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=qquws_after_games_handicap
									name="<span color='$after_games_colour'>copy $after_games_copy_info|%</span>"
									description="Sent from side $after_games_copied_from_side"
								[/dummy]
							[/abilities]
						[/effect]
					[/object]
				[/modify_unit]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=new_unit_bonus_hp
				greater_than=1.4
			[/variable]
			[or]
				[variable]
					name=new_unit_bonus_dmg
					greater_than=2.4
				[/variable]
			[/or]
			[or]
				[variable]
					name=new_unit_bonus_strikes
					greater_than=0.5
				[/variable]
			[/or]
			[or]
				[variable]
					name=uws_game.spawn_weak_enemies
					boolean_equals=yes
				[/variable]
			[/or]
			[then]
				{VARIABLE_OP new_unit_bonus_hp multiply $uws_game.buff_modifier}
				{VARIABLE_OP new_unit_bonus_hp round 1}
				
				{VARIABLE_OP new_unit_bonus_dmg multiply $uws_game.buff_modifier}
				{VARIABLE_OP new_unit_bonus_dmg round 1}
				
				[if]
					[variable]
						name=new_unit_bonus_dmg
						less_than=0
					[/variable]
					[then]
						{VARIABLE total_bonus_description "+$new_unit_bonus_hp|% hp / $new_unit_bonus_dmg|% dmg"}
					[/then]
					[else]
						{VARIABLE total_bonus_description "+$new_unit_bonus_hp|% hp / +$new_unit_bonus_dmg|% dmg"}
					[/else]
				[/if]
				
				[if]
					[variable]
						name=new_unit_bonus_strikes
						greater_than=0
					[/variable]
					[then]
						{VARIABLE total_bonus_description "$total_bonus_description / +$new_unit_bonus_strikes strikes"}
					[/then]
				[/if]
				
				[modify_unit]
					[filter]
						id=$new_unit_spawn_id
					[/filter]
						
					[object]
						silent=yes
						
						[effect]
							apply_to=hitpoints
							increase="$new_unit_bonus_hp|%"
							increase_total="$new_unit_bonus_hp|%"
						[/effect]
						[effect]
							apply_to=attack
							increase_damage="$new_unit_bonus_dmg|%"
							increase_attacks=$new_unit_bonus_strikes
						[/effect]
						[effect]
							apply_to=new_ability
							[abilities]
								[dummy]
									id=cheating
									name="bonus"
									description="$bonus_breakdown
		Total (x$uws_game.buff_modifier|): $total_bonus_description"
								[/dummy]
							[/abilities]
						[/effect]
					[/object]
				[/modify_unit]
			[/then]
		[/if]
	[/event]
	
	[event]
		name=get_unit_main_image_dimensions
		first_time_only=no
		
		[lua]
			code=<<
				local unit_image_path = wesnoth.get_variable("spawned_unit_type.image")
				local w, h = filesystem.image_size(unit_image_path)
				wesnoth.set_variable("bulky_unit_image_base_width", w)
				wesnoth.set_variable("bulky_unit_image_base_height", h)
>>
		[/lua]
		
		{VARIABLE scale_size 1.25}
		[if]
			[variable]
				name=scale_bulky_from_value
				greater_than=110
			[/variable]
			[then]
				{VARIABLE scale_size 1.5}
			[/then]
		[/if]
		
		{VARIABLE bulky_image_width $bulky_unit_image_base_width}
		{VARIABLE_OP bulky_image_width multiply $scale_size}
		{VARIABLE_OP bulky_image_width round floor}
		
		{VARIABLE bulky_image_height $bulky_unit_image_base_height}
		{VARIABLE_OP bulky_image_height multiply $scale_size}
		{VARIABLE_OP bulky_image_height round floor}
	[/event]
#enddef

#define QQUWS_SPAWN_RACE_BATCH
	[event]
		name=spawn_race_batch
		first_time_only=no
		
		{VARIABLE west_cutoff $sides[8].race_high_point}
		{VARIABLE_OP west_cutoff sub $race_spawn_look_ahead}
		
		{VARIABLE east_cutoff $sides[9].race_high_point}
		{VARIABLE_OP east_cutoff sub $race_spawn_look_ahead}
		
		{FOREACH spawn_queue j}
			{VARIABLE spawned_no 0}
			{VARIABLE spawn_west no}
			{VARIABLE spawn_east no}
			{VARIABLE real_spawn_count 0}
			
			[if]
				[variable]
					name=spawn_queue[$j].spawned
					contains=w
				[/variable]
				[then]
					{VARIABLE_OP spawned_no add 1}
				[/then]
				[else]
					[if]
						[variable]
							name=spawn_queue[$j].y
							greater_than=$west_cutoff
						[/variable]
						[then]
							{VARIABLE spawn_west yes}
							{VARIABLE spawn_y $spawn_queue[$j].y}
							{VARIABLE spawn_queue[$j].spawned "w $spawn_queue[$j].spawned"}
							{VARIABLE_OP spawned_no add 1}
							{VARIABLE_OP real_spawn_count add 1}
						[/then]
					[/if]
				[/else]
			[/if]
			
			[if]
				[variable]
					name=spawn_queue[$j].spawned
					contains=e
				[/variable]
				[then]
					{VARIABLE_OP spawned_no add 1}
				[/then]
				[else]
					[if]
						[variable]
							name=spawn_queue[$j].y
							greater_than=$east_cutoff
						[/variable]
						[then]
							{VARIABLE spawn_east yes}
							{VARIABLE spawn_y $spawn_queue[$j].y}
							{VARIABLE spawn_queue[$j].spawned "e $spawn_queue[$j].spawned"}
							{VARIABLE_OP spawned_no add 1}
							{VARIABLE_OP real_spawn_count add 1}
						[/then]
					[/if]
				[/else]
			[/if]
			
			[if]
				[variable]
					name=real_spawn_count
					greater_than=0
				[/variable]
				[then]
					{SPAWN_SET_VARIABLES}
		
					[fire_event]
						name=spawn
					[/fire_event]
				[/then]
			[/if]
			
			[if]
				[variable]
					name=spawned_no
					greater_than_equal_to=2
				[/variable]
				[then]
					{CLEAR_VARIABLE spawn_queue[$j]}
					{VARIABLE_OP j sub 1}
				[/then]
			[/if]
		{NEXT j}
		
		{VARIABLE west_cutoff $sides[8].race_high_point}
		{VARIABLE_OP west_cutoff add $race_spawn_look_ahead}
		
		{VARIABLE east_cutoff $sides[9].race_high_point}
		{VARIABLE_OP east_cutoff add $race_spawn_look_ahead}
		
		[modify_unit]
			[filter]
				side=2,3,4
				y=$west_cutoff|-200
				formula="if(self.max_moves < 3, 1, 0)"
			[/filter]
			
			[object]
				silent=yes
				
				[effect]
				    apply_to=movement
				    set=4
				[/effect]
			[/object]
		[/modify_unit]
		
		[modify_unit]
			[filter]
				side=5,6,7
				y=$east_cutoff|-200
				formula="if(self.max_moves < 3, 1, 0)"
			[/filter]
			
			[object]
				silent=yes
				
				[effect]
				    apply_to=movement
				    set=4
				[/effect]
			[/object]
		[/modify_unit]
	[/event]
	
	[event]
		name=spawn_slash_batch
		first_time_only=no
		
		{VARIABLE west_cutoff $sides[8].race_high_point}
		{VARIABLE_OP west_cutoff sub $race_spawn_look_ahead}
		
		{FOREACH spawn_queue j}
			[if]
				[variable]
					name=spawn_queue[$j].y
					greater_than=$west_cutoff
				[/variable]
				[then]
					{VARIABLE spawn_west yes}
					{VARIABLE spawn_east no}
					{VARIABLE spawn_y $spawn_queue[$j].y}
					
					{SPAWN_SET_VARIABLES}
		
					[fire_event]
						name=spawn
					[/fire_event]
					
					{CLEAR_VARIABLE spawn_queue[$j]}
					{VARIABLE_OP j sub 1}
				[/then]
			[/if]
		{NEXT j}
		
		{VARIABLE west_cutoff $sides[8].race_high_point}
		{VARIABLE_OP west_cutoff add $race_spawn_look_ahead}
		
		[modify_unit]
			[filter]
				side=2,3,4
				y=$west_cutoff|-200
				formula="if(self.max_moves < 3, 1, 0)"
			[/filter]
			
			[object]
				silent=yes
				
				[effect]
				    apply_to=movement
				    set=4
				[/effect]
			[/object]
		[/modify_unit]
	[/event]
#enddef

#define QQUWS_RACE_VICTORY
	[event]
		name=trigger_race_victory
		first_time_only=yes
		
		{FLASH_WHITE ()}
										
		[message]
		    speaker=narrator
		    caption="Timeless Bones, the Herald of the Crimson Banner"
		    image="portraits/uws/eternal.png"
		    message="Congratulations to $sides[$winning_side|].leader_name for winning the match!"
		[/message]
		
		[kill]
			[not]
				side=$winning_side
			[/not]
		[/kill]
	[/event]
#enddef

#define QQUWS_APPLY_RUNE_BONUS
	[event]
		name=apply_rune_bonus
		first_time_only=no
		
		{VARIABLE quiet_bonus_key $rune_apply_key}
		{VARIABLE quiet_bonus_unit_id $unit.id}
		[fire_event]
			name=apply_quiet_bonus
		[/fire_event]
		
		[label]
			x=$unit.x
			y=$unit.y
			text=$applied_rune_text
			visible_in_fog=no
			visible_in_shroud=no
		[/label]
	[/event]
#enddef

#define QQUWS_PRINT_RACE_STATS
	[event]
		name=print_race_stats
		first_time_only=no
		
		{VARIABLE left_progress $sides[8].kills_race_value}
		{VARIABLE_OP left_progress divide $race_total_enemies}
		{VARIABLE_OP left_progress multiply 100}
		{VARIABLE_OP left_progress round 1}
		[if]
			[variable]
				name=sides[8].kills_race_opposite
				greater_than=0
			[/variable]
			[then]
				{VARIABLE left_opposite $sides[8].kills_race_opposite}
				{VARIABLE_OP left_opposite divide $race_total_enemies}
				{VARIABLE_OP left_opposite multiply 100}
				{VARIABLE_OP left_opposite round 1}
				{VARIABLE left_progress "($left_opposite|%) $left_progress|%"}
			[/then]
			[else]
				{VARIABLE left_progress "$left_progress|%"}
			[/else]
		[/if]
		
		{VARIABLE right_progress $sides[9].kills_race_value}
		{VARIABLE_OP right_progress divide $race_total_enemies}
		{VARIABLE_OP right_progress multiply 100}
		{VARIABLE_OP right_progress round 1}
		[if]
			[variable]
				name=sides[9].kills_race_opposite
				greater_than=0
			[/variable]
			[then]
				{VARIABLE right_opposite $sides[9].kills_race_opposite}
				{VARIABLE_OP right_opposite divide $race_total_enemies}
				{VARIABLE_OP right_opposite multiply 100}
				{VARIABLE_OP right_opposite round 1}
				{VARIABLE right_progress "$right_progress|% ($right_opposite|%)"}
			[/then]
			[else]
				{VARIABLE right_progress "$right_progress|%"}
			[/else]
		[/if]
		
		[print]
			text="$left_progress - $right_progress"
			size=20
			duration=unlimited
			color=255,255,255
		[/print]
	[/event]
#enddef

#define QQUWS_RACE_ONE_RECRUITER_ONLY
	[event]
		name=race_ensure_one_recruiter
		first_time_only=no
		
		[if]
			[variable]
				name=uws_game.is_open_world
				boolean_equals=yes
			[/variable]
			[then]
				[if]
					[have_unit]
						side=$run_events_for_side
						canrecruit=yes
						x=2-100
						[not]
							id=$spawning_unit.id
						[/not]
					[/have_unit]
					[then]
						[modify_unit]
							[filter]
								side=$run_events_for_side
								canrecruit=yes
								x=2-100
								[not]
									id=$spawning_unit.id
								[/not]
							[/filter]
							
							canrecruit=no
						[/modify_unit]
					[/then]
				[/if]
			[/then]
		[/if]
	[/event]
#enddef

#define QQUWS_SLASH_CALL_TO_FIGHT
	[event]
		name=slash_call_to_fight
		first_time_only=no
		
		[if]
			[variable]
				name=uws_game.is_open_world
				boolean_equals=yes
			[/variable]
			[then]
				[if]
					[variable]
						name=uws_game.mode
						equals=slash
					[/variable]
					[then]
						{VARIABLE_OP sides[8].race_high_point sub 3}
					[/then]
					[else]
						[if]
							[variable]
								name=run_events_for_side
								less_than=5
							[/variable]
							[then]
								{VARIABLE_OP sides[8].race_high_point sub 3}
							[/then]
							[else]
								{VARIABLE_OP sides[9].race_high_point sub 3}
							[/else]
						[/if]
					[/else]
				[/if]
				
				
				{VARIABLE gold_trickle_event_id "steady_gold_$new_unit_spawn_id"}
				
				[event]
					id=$gold_trickle_event_id
					name="turn end"
					first_time_only=no
					delayed_variable_substitution=no
					
					[if]
						[have_unit]
							id=$new_unit_spawn_id
							count=1
						[/have_unit]
						[then]
							{VARIABLE receive_gold $|turn_number}
							{VARIABLE_OP receive_gold modulo 3}
							
							[if]
								[variable]
									name=receive_gold
									numerical_equals=0
								[/variable]
								[then]
									{VARIABLE fraction_g $|turn_number} # current turn number
									{VARIABLE_OP fraction_g sub $turn_number} # substituted at the event creation
									{VARIABLE_OP fraction_g multiply 0.4}
									{VARIABLE_OP fraction_g add 2.8}
									{VARIABLE_OP fraction_g multiply $spawn_recruitment_gold} # substituted at the event creation
									{VARIABLE_OP fraction_g divide 100}
									{VARIABLE_OP fraction_g round floor}
									
									[if]
										[variable]
											name=fraction_g
											greater_than=0
										[/variable]
										[then]
											[gold]
												side=$run_events_for_side
												amount=$|fraction_g
											[/gold]
										[/then]
									[/if]
								[/then]
							[/if]
						[/then]
						[else]
							[remove_event]
								id=$gold_trickle_event_id
							[/remove_event]
						[/else]
					[/if]
				[/event]
				
				[for]
					variable=i
					start=0
					end=7
					step=1
					[do]
						{VARIABLE call_to_fight_turn $turn_number}
						{VARIABLE_OP call_to_fight_turn add $i}
						{VARIABLE_OP call_to_fight_turn add 2}
						
						[event]
							name="turn $call_to_fight_turn end"
							first_time_only=yes
							delayed_variable_substitution=no
							
							{VARIABLE push_units_y $spawn_y}
							{VARIABLE_OP push_units_y add 3}
							{VARIABLE_OP push_units_y sub $i}
							
							[modify_unit]
								[filter]
									y=$|push_units_y
									side=$run_events_for_side
									status=guardian
									
									[filter_wml]
										[variables]
											is_stoic=no
										[/variables]
									[/filter_wml]
								[/filter]
								
								[status]
									guardian=no
								[/status]
							[/modify_unit]
						[/event]
					[/do]
				[/for]
			[/then]
		[/if]
	[/event]
#enddef

#define QQUWS_HANDLE_XP_MOD
	[event]
		name=uws_handle_xp_mod
		first_time_only=no
		
		[lua]
		    code = <<
		    		wesnoth.set_variable('current_era_id', wesnoth.scenario.era.id)
		    		wesnoth.set_variable('current_game_modifications', wesnoth.scenario.mp_settings.active_mods)
		    		
				helper = wesnoth.require "lua/helper.lua"
				T = helper.set_wml_tag_metatable {}
				
				local base_xp_mod_action = wesnoth.wml_actions.xp_mod
				
				function wesnoth.wml_actions.xp_mod(cfg)
					base_xp_mod_action(cfg)
					
					local event_context = wesnoth.current.event_context
					local unit = wesnoth.get_unit(event_context.x1, event_context.y1)
					local side_str = 'sides[' .. tostring(unit.side) .. '].'
					if wesnoth.get_variable('uws_game.mode') == 'slash' then
						side_str = 'sides[8].'
					end
					
					local stat_str = 'xp_mod_hp'
					if string.find(cfg.desc, "movement") then
						stat_str = 'xp_mod_mp'
					elseif string.find(cfg.desc, "damage") then
						stat_str = 'xp_mod_dmg'
					elseif string.find(cfg.desc, "strike") then
						stat_str = 'xp_mod_str'
					end
					
					local used_times = wesnoth.get_variable(side_str .. stat_str)
					wesnoth.set_variable(side_str .. stat_str, used_times + 1)
				end
		    >>
		[/lua]
		{VARIABLE xp_mod_set yes}
		
		[if]
			[variable]
				name=uws_is_campaign
				boolean_equals=yes
			[/variable]
			[then]
				[if]
					[variable]
						name=Rav_XP_strike_cost
						less_than=60
					[/variable]
					[then]
						{VARIABLE_OP Rav_XP_hp_cost multiply 1.88}
						{VARIABLE_OP Rav_XP_hp_cost round floor}
						{VARIABLE_OP Rav_XP_move_cost multiply 1.88}
						{VARIABLE_OP Rav_XP_move_cost round floor}
						{VARIABLE_OP Rav_XP_damage_cost multiply 1.88}
						{VARIABLE_OP Rav_XP_damage_cost round floor}
						{VARIABLE_OP Rav_XP_strike_cost multiply 1.88}
						{VARIABLE_OP Rav_XP_strike_cost round floor}
					[/then]
				[/if]
			[/then]
		[/if]
	[/event]
#enddef

#define QQUWS_HANDLE_MASK_FILE_SUBSTITUTION
	[event]
		name=substitute_mask_file
		first_time_only=no
		
		{VARIABLE middle_tile_x $uws_game.middle}
		{VARIABLE current_mask_data $uws_game.mask_file}
		
		[if]
			[variable]
				name=uws_game.mode
				equals=slash
			[/variable]
			[then]
				[qquws_generate_new_mask_data]
			    		partial_data=$new_partial_data
			    		current_mask_data=$current_mask_data
			    		mask_manipulation_mode=left
			    		middle_tile_x=$middle_tile_x
			    		insert_at=$partial_location
			    		partial_length=$partial_length
			    		new_mask_var_name=altered_mask_data
				[/qquws_generate_new_mask_data]
				
				[replace_map]
				    map=$altered_mask_data
				[/replace_map]
				
				{VARIABLE hide_map_from_x $uws_game.middle}
				{VARIABLE_OP hide_map_from_x add 1}
				
				{VARIABLE hide_map_from_y $uws_game.race_make_players_opponents_y}
				{VARIABLE_OP hide_map_from_y sub 3}
				
				[terrain]
					terrain=_off^_usr
					y=$hide_map_from_y|-200
					x=$hide_map_from_x|-100
				[/terrain]
				
				[store_map_dimensions]
					variable=map_size
				[/store_map_dimensions]
				
				[for]
					variable=i
					start=$race_lava_border
					end=$map_size.height
					step=2
					[do]
						[terrain_mask]
							x=1
							y=$i
							mask="{~add-ons/QQ_Ultimate_Wesnoth_Survival/maps/race_lava_mask.map}"
							border="yes"
							[rule]
								old=A*,B*,C*,D*,E*,F*,G*,H*,I*,J*,K*,L*,N*,O*,P*,Q*,R*,S*,T*,U*,V*,W*,Y*,Z*,A*^*,B*^*,C*^*,D*^*,E*^*,F*^*,G*^*,H*^*,I*^*,J*^*,K*^*,L*^*,N*^*,O*^*,P*^*,Q*^*,R*^*,S*^*,T*^*,U*^*,V*^*,W*^*,Y*^*,Z*^*
								new=Qlf
							[/rule]
							[rule]
								use_old=yes
							[/rule]
						[/terrain_mask]
					[/do]
				[/for]
			[/then]
			[else]
				[switch]
					variable=substitution_mode
					
					[case]
						value=left
						
						[qquws_generate_new_mask_data]
					    		partial_data=$new_partial_data
					    		current_mask_data=$current_mask_data
					    		mask_manipulation_mode=left
					    		middle_tile_x=$middle_tile_x
					    		insert_at=$partial_location
					    		partial_length=$partial_length
					    		new_mask_var_name=altered_mask_data
						[/qquws_generate_new_mask_data]
						
						{VARIABLE uws_game.mask_file $altered_mask_data}
					[/case]
					[case]
						value=right
						
						[qquws_generate_new_mask_data]
					    		partial_data=$new_partial_data
					    		current_mask_data=$current_mask_data
					    		mask_manipulation_mode=right
					    		middle_tile_x=$middle_tile_x
					    		insert_at=$partial_location
					    		partial_length=$partial_length
					    		new_mask_var_name=altered_mask_data
						[/qquws_generate_new_mask_data]
						
						{VARIABLE uws_game.mask_file $altered_mask_data}
					[/case]
				[/switch]
				
				{VARIABLE scroll_y $uws_game.scroll_rounds}
				{VARIABLE_OP scroll_y multiply -1}
				{VARIABLE_OP scroll_y add $turn_number}
				
				[terrain_mask]
					x=1
					y=$scroll_y
					mask=$uws_game.mask_file
					border="yes"
					[rule]
						old=A*,B*,C*,D*,E*,F*,G*,H*,I*,J*,K*,L*,M*,N*,O*,P*,Q*,R*,S*,T*,U*,V*,W*,Y*,Z*,A*^*,B*^*,C*^*,D*^*,E*^*,F*^*,G*^*,H*^*,I*^*,J*^*,K*^*,L*^*,M*^*,N*^*,O*^*,P*^*,Q*^*,R*^*,S*^*,T*^*,U*^*,V*^*,W*^*,Y*^*,Z*^*,_off^_usr,Xu,Xos,Xuc,Xue,Xom,Xoi,Xoc,Xot,*^Efs
					[/rule]
					[rule]
						use_old=yes
					[/rule]
				[/terrain_mask]
				
				{CLEAR_VARIABLE middle_tile_x,current_mask_data,altered_mask_data}
			[/else]
		[/if]
	[/event]
#enddef

#define QQUWS_UNHIDE_ITEM_ON_MAP
	[event]
		name=unhide_item_on_map
		first_time_only=no
		
		[for]
			variable=i
			array=scrollable_items
			[do]
				[if]
					[variable]
						name=scrollable_items[$i].object_id
						equals=$unhide_item_id
					[/variable]
					[then]
						{VARIABLE scrollable_items[$i].render yes}
						
						[fire_event]
							name=render_item_on_map
						[/fire_event]
					[/then]
				[/if]
			[/do]
		[/for]
	[/event]
	
	[event]
		name=render_item_on_map
		first_time_only=no
		
		{VARIABLE place_item yes}
		[if]
			[variable]
				name=uws_game.mode
				equals=scroll
			[/variable]
			[then]
				[if]
					[variable]
						name=scrollable_items[$i].y
						less_than=4
					[/variable]
					[or]
						[variable]
							name=scrollable_items[$i].y
							greater_than=18
						[/variable]
					[/or]
					[then]
						{VARIABLE place_item no}
					[/then]
				[/if]
			[/then]
		[/if]
		
		[if]
			[variable]
				name=scrollable_items[$i].render
				boolean_equals=no
			[/variable]
			[then]
				{VARIABLE place_item no}
			[/then]
		[/if]
		
		[if]
			[variable]
				name=place_item
				boolean_equals=yes
			[/variable]
			[then]
				[item]
					x,y=$scrollable_items[$i].x,$scrollable_items[$i].y
					image=$scrollable_items[$i].image
				[/item]
				
				[if]
					[variable]
						name=scrollable_items[$i].name
						not_equals=""
					[/variable]
					[then]
						{GENERATE_LABEL_TEXT}
						[label]
							x=$scrollable_items[$i].x
							y=$scrollable_items[$i].y
							text="<span color='$scrollable_items[$i].color|'>$item_label|</span>"
							tooltip=$item_tooltip
							visible_in_fog=no
							visible_in_shroud=no
						[/label]
					[/then]
				[/if]
			[/then]
		[/if]
	[/event]
#enddef

#define QQUWS_MAINTAIN_HIDDEN_LEADERS
	[event]
		name=maintain_hidden_leaders
		first_time_only=no
		
		[store_unit]
			variable=side_leaders
			mode=always_clear
			[filter]
				side=$side_number
				canrecruit="yes"
			[/filter]
		[/store_unit]
		
		[switch]
			variable=side_leaders.length
			[case]
				value=0
				{CREATE_PLACEHOLDER_LEADER $side_number}
			[/case]
			[case]
				value=2
				[kill]
					type="Peasant"
					side=$side_number
					canrecruit="yes"
					fire_event=no
				[/kill]
			[/case]
		[/switch]
		
		{CLEAR_VARIABLE side_leaders}	
	[/event]
#enddef

#define QQUWS_INIT_AND_REPLACE_MAP_MASK
	[event]
		name=init_and_replace_map_mask
		first_time_only=yes
		
		{TRANSFER_GAME_SETTINGS_TO_GAME_VAR}
		
		[switch]
			variable=uws_game.mode
			
			[case]
				value=scroll
				
				{VARIABLE new_map_width $uws_game.edge}
				[lua]
				    code = <<
				    	local width = wesnoth.get_variable('new_map_width')
				    	local height = 22
				    	local map_data = ''
				    	
				    	for i=1,height,1 do
				    		for j=1,width - 1, 1 do
				    			map_data = map_data .. 'Gg, '
				    		end
				    		
				    		map_data = map_data .. 'Gg' .. string.char(10)
				    	end
				    	
				    	wesnoth.set_variable('expand_map_data', map_data)
				    >>
				[/lua]
				
				[replace_map]
					map_data=$expand_map_data
					expand=yes
					shrink=yes
				[/replace_map]
				
				{VARIABLE scroll_y $uws_game.scroll_rounds}
				{VARIABLE_OP scroll_y multiply -1}
				{VARIABLE_OP scroll_y add 1}
				
				[terrain_mask]
					x=1
					y=$scroll_y
					mask=$uws_game.mask_file
					border="yes"
					[rule]
						old=*
					[/rule]
				[/terrain_mask]
				
				[terrain]
					x=0-$new_map_width
					y=0-3
					terrain=Xv
				[/terrain]
				
				{TELEPORT_LEADER 8 $uws_game.starting_ax $uws_game.starting_y}
				{TELEPORT_LEADER 9 $uws_game.starting_bx $uws_game.starting_y}
			[/case]
			
			[case]
				value=slash
				
				{TELEPORT_LEADER 8 5 1}
				{TELEPORT_LEADER 9 8 1}
				
				[replace_map]
				    map=$uws_game.mask_file
				    shrink=yes
				    expand=yes
				[/replace_map]
				
				[place_shroud]
					[filter_side]
						side=$uws_game.filter_human_sides
					[/filter_side]
					
					x=1-$uws_game.edge
					y=1-200
				[/place_shroud]
				
				{VARIABLE hide_map_from_x $uws_game.middle}
				{VARIABLE_OP hide_map_from_x add 1}
				
				{VARIABLE hide_map_from_y $uws_game.race_make_players_opponents_y}
				{VARIABLE_OP hide_map_from_y sub 3}
				
				[terrain]
					terrain=_off^_usr
					y=$hide_map_from_y|-200
					x=$hide_map_from_x|-100
				[/terrain]
				
				{VARIABLE leaderb_start_y $uws_game.race_start_y}
				{VARIABLE_OP leaderb_start_y add 1}
				
				{TELEPORT_LEADER 8 $uws_game.starting_ax $uws_game.race_start_y}
				{TELEPORT_LEADER 9 $uws_game.starting_ax $leaderb_start_y}
				
				[if]
					[variable]
						name=uws_game.single_player_game
						boolean_equals=no
					[/variable]
					[then]
						[terrain]
							terrain=$uws_game.slash_keep_tile
							y=$leaderb_start_y
							x=$uws_game.starting_ax
						[/terrain]
					[/then]
				[/if]
				
				{REMOVE_SHROUD_AROUND $uws_game.starting_ax $uws_game.race_start_y}
				
				[scroll_to]
					x=$uws_game.starting_ax
					y=$uws_game.race_start_y
				[/scroll_to]
				
				[capture_village]
					side=1
					fire_event=no
					owner_side=0
				[/capture_village]
			[/case]
			
			[case]
				value=race
				
				{TELEPORT_LEADER 8 5 1}
				{TELEPORT_LEADER 9 8 1}
				
				[replace_map]
				    map=$uws_game.mask_file
				    shrink=yes
				    expand=yes
				[/replace_map]
				
				[place_shroud]
					[filter_side]
						side=$uws_game.filter_human_sides
					[/filter_side]
					
					x=1-$uws_game.edge
					y=1-200
				[/place_shroud]
				
				[item]
					x=$uws_game.middle
					y=$uws_game.race_finish_y
					halo=flags/wood-elvish-flag-[1~4].png~SCALE(120,120):150
				[/item]
				
				[terrain]
					x=$uws_game.middle
					y=$uws_game.race_finish_y
					layer=overlay
					terrain="^Xo"
				[/terrain]
				
				{TELEPORT_LEADER 8 $uws_game.starting_ax $uws_game.race_start_y}
				{TELEPORT_LEADER 9 $uws_game.starting_bx $uws_game.race_start_y}
				
				{REMOVE_SHROUD_AROUND $uws_game.middle $uws_game.race_finish_y}
				{REMOVE_SHROUD_AROUND $uws_game.starting_ax $uws_game.race_start_y}
				{REMOVE_SHROUD_AROUND $uws_game.starting_bx $uws_game.race_start_y}
				
				[scroll_to]
					x=$uws_game.middle
					y=$uws_game.race_finish_y
				[/scroll_to]
				
				[capture_village]
					side=1
					fire_event=no
					owner_side=0
				[/capture_village]
			[/case]
			
			[case]
				value=after_classic
				
				{TELEPORT_LEADER 8 5 1}
				{TELEPORT_LEADER 9 8 1}
				
				[replace_map]
				    map=$uws_game.mask_file
				    shrink=yes
				    expand=yes
				[/replace_map]
				
				[modify_side]
					[filter_side]
						side=2,3,4,9
					[/filter_side]
					
					team_name=East
					user_team_name=East
					fog=yes
					share_vision=all
				[/modify_side]
				
				[modify_side]
					[filter_side]
						side=5,6,7,8
					[/filter_side]
					
					team_name=West
					user_team_name=West
					fog=yes
					share_vision=all
				[/modify_side]
				
				{TELEPORT_LEADER 8 $uws_game.starting_ax $uws_game.starting_y}
				{TELEPORT_LEADER 9 $uws_game.starting_bx $uws_game.starting_y}
			[/case]
		[/switch]
	[/event]
#enddef

#define QQUWS_PREPARE_AFTER_GAMES_SPAWN
	[event]
		name=prepare_after_games_spawn
		first_time_only=no
		
		{VARIABLE east_x $uws_game.edge}
		{VARIABLE_OP east_x sub $after_spawn_x}
		
		[unit]
			type="QQUWS_surprise"
			side=2
			placement=map
			passable=yes
			overwrite=no
			x=$after_spawn_x
			y=$after_spawn_y
			random_traits=no
			random_gender=no
			upkeep=loyal
			facing=se
			[status]
				petrified=yes
			[/status]
		[/unit]
		
		[unit]
			type="QQUWS_surprise"
			side=5
			placement=map
			passable=yes
			overwrite=no
			x=$east_x
			y=$after_spawn_y
			random_traits=no
			random_gender=no
			upkeep=loyal
			facing=se
			[status]
				petrified=yes
			[/status]
		[/unit]
	[/event]
	
	[event]
		name=find_vacant_after_games_spawn
		first_time_only=no
		
		{VARIABLE east_x $uws_game.edge}
		{VARIABLE_OP east_x sub $after_spawn_x}
		
		[unit]
			type="QQUWS_surprise"
			side=1
			placement=map
			passable=yes
			overwrite=no
			x=$after_spawn_x
			y=$after_spawn_y
			random_traits=no
			random_gender=no
			upkeep=loyal
			facing=se
			[status]
				petrified=yes
			[/status]
		[/unit]
		
		[store_unit]
			[filter]
				type=QQUWS_surprise
			[/filter]
			
			variable=newly_spawned_unit
			mode=always_clear
		[/store_unit]
		
		{VARIABLE available_location_x $newly_spawned_unit.x}
		{VARIABLE available_location_y $newly_spawned_unit.y}
		
		[kill]
			x=$newly_spawned_unit.x
			y=$newly_spawned_unit.y
			fire_event=no
		[/kill]
	[/event]
	
	[event]
		name=after_games_apply_copy_modifications
		first_time_only=no
		
		{VARIABLE spawn_type $after_games_copy_unit_type}
		{VARIABLE new_unit_bulky_value 0}
		{VARIABLE new_unit_armored_value 0}
		{VARIABLE new_unit_beefy_value 0}
		{VARIABLE new_unit_fast_value 0}
		{VARIABLE new_unit_agile_value 0}
		{VARIABLE new_unit_spawn_champion ""}
		{VARIABLE new_unit_spawn_quiet_bonus_id ""}
		{VARIABLE new_unit_spawn_minion ""}
		{VARIABLE new_unit_gold $after_games_gold_value}
		{VARIABLE new_unit_has_item $after_games_drop_item}
		
		[fire_event]
			name=apply_new_unit_bonus
		[/fire_event]
	[/event]
	
	[event]
		name=prepare_after_games_remove_placeholders
		first_time_only=no
		
		[store_unit]
			[filter]
				type=QQUWS_surprise
			[/filter]
			
			variable=after_placeholders
			mode=always_clear
		[/store_unit]
		
		[foreach]
			array=after_placeholders
			variable=placeholder
			[do]
				[label]
					x=$placeholder.x
					y=$placeholder.y
					text=""
				[/label]
			[/do]
		[/foreach]
		
		{CLEAR_VARIABLE after_placeholders,placeholder}
		[kill]
			type=QQUWS_surprise
			fire_event=no
		[/kill]
	[/event]
#enddef

